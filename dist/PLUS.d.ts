// Generated by dts-bundle-generator v6.12.0

export interface GlobalObject {
	[key: string]: unknown;
}
export interface IEvent extends GlobalObject {
	type: string;
	value: string | boolean | GlobalObject | unknown | Transferable;
	clientX: number;
	clientY: number;
	offsetX: number;
	offsetY: number;
	pageX: number;
	pageY: number;
	screenX: number;
	screenY: number;
	x: number;
	y: number;
	dx: number;
	dy: number;
	altKey: boolean;
	shiftKey: boolean;
	ctrlKey: boolean;
	metaKey: boolean;
	timeStamp: number;
	transfer?: Transferable | GlobalObject | undefined | unknown;
}
export interface IConf {
	state?: GlobalObject;
	persisted?: boolean;
	version?: string;
	size?: number;
}
export interface IRes {
	code: number;
	data: GlobalObject;
	msg: string;
}
export interface StringObject {
	[key: string]: string;
}
export interface Irender {
	render?: string | boolean;
	payload?: unknown;
}
export interface IStringO extends Irender {
	value: string;
}
export interface ICSSO {
	[key: string]: string | number | undefined;
}
export interface ContainerConf extends Irender {
	style?: ICSSO;
	hoverStyle?: ICSSO;
	children?: IStruct[];
}
export type IContainer = ContainerConf;
export interface ITextCof extends IStringO {
	style?: ICSSO;
	hoverStyle?: ICSSO;
}
export type IText = string | ITextCof;
export interface ITabCof extends IStringO {
	list?: StringObject;
	sticky?: boolean;
}
export type ITab = string | ITabCof;
export interface IButtonCof extends IStringO {
	color?: string;
	disabled?: boolean;
	icon?: string;
}
export type IButton = string | IButtonCof;
export interface IButtonGroupCof extends Irender {
	style?: ICSSO;
	group: GlobalObject[];
}
export type IButtonGroup = IButtonGroupCof;
export interface ISwitchItemCof extends Irender {
	value: boolean | string;
	name: string;
	disabled?: boolean;
}
export type ISwitchItem = string | boolean | ISwitchItemCof;
export interface ICheckboxCof extends Irender {
	value: boolean | string;
	name: string;
	disabled?: boolean;
}
export type ICheckbox = string | boolean | ICheckboxCof;
export interface IOptionsCof {
	value: unknown;
	label: string;
	icon?: string;
	tip?: string;
	viewBox?: string;
	style?: ICSSO;
	wrapStyle?: ICSSO;
	disabled?: boolean;
}
export interface ISelectItemCof extends Irender {
	value: unknown;
	name: string;
	options: IOptionsCof[];
	filterable?: boolean;
	changeable?: boolean;
}
export type ISelectItem = ISelectItemCof;
export interface IOptionGroupCof extends Irender {
	value: unknown;
	name: string;
	style?: ICSSO;
	options: IOptionsCof[];
}
export type IOptionGroup = IOptionGroupCof;
export interface IInputItemCof extends Irender {
	value: unknown | string;
	name: string;
	type?: string;
	placeholder?: string;
	disabled?: boolean;
	readonly?: boolean;
	useHelper?: boolean;
	maxlength?: string | number;
}
export type IInputItem = IInputItemCof;
export interface ICanvasCof extends Irender {
	width: number;
	height: number;
	style?: ICSSO;
}
export type ICanvas = ICanvasCof;
export interface ISliderItemCof extends Irender {
	value: string | number;
	name: string;
	step?: number;
	hideTip?: boolean;
	min?: number;
	max?: number;
}
export type ISliderItem = ISliderItemCof;
export type ISubHeader = string | IStringO;
export type IHeader = string | IStringO;
export type ILoading = string | IStringO | Irender;
export interface ILinkCof extends IStringO {
	name: string;
}
export type ILink = ILinkCof;
export interface IImageCof extends IStringO {
	style?: ICSSO;
	hoverStyle?: ICSSO;
	dragAndDrop?: boolean;
	droppableType?: string[];
}
export type IImage = string | IImageCof;
export interface ITextareaCof extends IStringO {
	name: string;
	placeholder?: string;
	disabled?: boolean;
	readonly?: boolean;
}
export type ITextarea = ITextareaCof;
export interface IUploadItemCof extends Irender {
	value: unknown | string;
	multiple?: boolean;
	accept?: string;
}
export type IUploadItem = IUploadItemCof;
export interface IIFstructContainerCof extends Irender {
	value: GlobalObject | string;
	style?: ICSSO;
	hoverStyle?: ICSSO;
	subStyle?: ICSSO;
	dragAndDrop?: boolean;
	proxyCurrentTarget?: boolean;
	payload?: GlobalObject;
}
export type IIFstructContainer = IIFstructContainerCof;
export interface ICodeCof extends Irender {
	value: string | GlobalObject;
	lang?: string;
	style?: ICSSO;
	hoverStyle?: ICSSO;
	hideCopyBtn?: boolean;
}
export type ICode = string | ICodeCof;
export interface IColorPickerCof extends Irender {
	name: string;
	value: unknown | string;
}
export type IColorPicker = IColorPickerCof;
export type IMatchCof = string | boolean | IContainer | IText | ITab | IButton | IButtonGroup | ISwitchItem | ICheckbox | ISelectItem | IOptionGroup | IInputItem | ICanvas | ISliderItem | ISubHeader | IHeader | ILoading | ILink | IImage | ITextarea | IUploadItem | IIFstructContainer | ICode | IColorPicker;
export interface IStruct {
	tag: string;
	value?: unknown | string | number | boolean | GlobalObject | IMatchCof;
	hook?: string;
}
/**
*on(event: **String**, callback: **Function**) : **void***

After successful initialization, you can listen to the event data sent to the expansion by iofod through the **on** method.

Parameter:

| parameter | default | description |
| ---------- | ------ | ---------------------------- |
| event | - | The name of the event.     | callback
| callback | - | The function to receive the event callback.  |

Example:

```js
PLUS.on('UpdateTree', res => {
  console.log(res)
})
```

For supported events, please see: [Extension Available Events](https://doc.iofod.com/#/en//9/04.md)
*/
export declare function on(event: string, fn?: (e: IEvent) => any): void;
/**
*off(event: **String**) : **void***

The **off** method is used to cancel the iofod event being listened to.

Parameter:

| Parameters | Default | Description |
| ---------- | ------ | ---------------------------- |
| event | - | The name of the event.     |

Example:

```js
PLUS.off('UpdateTree')
```
*/
export declare function off(event: string, fn?: Function): void;
/**
*once(event: **String**, callback: **Function**) : **void***

After successful initialization, you can listen to the event data sent to the expansion by iofod only once through the **once** method, which is equivalent to canceling the listened event immediately after the callback is triggered through the **on** method.

Parameter:

| Parameters | Default | Description |
| ---------- | ------ | ---------------------------- |
| event | - | The name of the event.     |
| callback | - | The function to receive the event callback.  |

Example:

```js
PLUS.once('UpdateTree', res => {
  console.log(res)
})
```
*/
export declare function once(event: string, fn: Function): void;
/**

*/
export declare function setContext(param: string): void;
export declare function call(type: string, payload: object, fn?: Function): string;
/**
*checkAccess(access: **String**) : **Promise\<Boolean\>***

After successful initialization, the **checkAccess** method can be used to check if a permission is included in the user's authorized permission list.

Parameter:

| Parameters | Default | Description |
| ---------- | ------ | ---------------------------- |
| access | - | Permission name.     |

Example:

```js
let flag = await PLUS.checkAccess('CTTWriteAccess')

if (!flag) return PLUS.toast.warning('insufficient permission')
```
*/
export declare function checkAccess(ql: string): Promise<string[] | boolean>;
/**
*checkAccessList() : **Promise\<Array\>**

After successful initialization, the **checkAccessList** method can be used to get the currently authorized user permissions.

Parameter description: None

Example:

```js
let list = await PLUS.checkAccessList()

console.log(list)
```
*/
export declare function checkAccessList(): Promise<string[]>;
/**
*requestAccess(accessList: **Array\<String\>**) : **Promise\<Res\>***

After successful initialization, user authorization permission can be requested via the **requestAccess** method.

Parameter:

| Parameter | Default | Description |
| ---------- | ------ | ---------------------------- |
| accessList | [ ] | The permission list.     |

Example:

```js
await PLUS.requestAccess([
  'CTTReadAccess',
  'CTTWriteAccess',
  'ModelsReadAccess',
  'ModelsWriteAccess'
])
```
*/
export declare function requestAccess(list?: string[]): Promise<IRes>;
/**
*withAccess(accessList: **Array\<String\>**) : **Promise\<Boolean\>***

After successful initialization, the **withAccess** method can be used to request the user to authorize permissions, returning the result of whether the user authorizes all the permissions contained in the list.

Parameter:

| Parameter | Default | Description |
| ---------- | ------ | ---------------------------- |
| accessList | [ ] | The list of permissions.     |

Example:

```js
let flag = await PLUS.withAccess([
  'CTTReadAccess',
  'CTTWriteAccess',
  'ModelsReadAccess',
  'ModelsWriteAccess'
])

if (!flag) return PLUS.toast.warning('Insufficient permissions')
```
*/
export declare function withAccess(list?: string[]): Promise<boolean>;
/**
*suid(prefix: **String**) : **String***

Tool method for generating IFstruct-style unique IDs for components.

Parameter:

| parameters | default | description |
| ---------- | ------ | ---------------------------- |
| prefix | 'W' | The prefix of the ID.     |

Example:

```js
let id = PLUS.suid()

console.log(id)
```
*/
export declare function suid(prefix?: string): string;
/**
*pullStruct(path: **String**) : **Promise\<Object | Res\>***

After successful initialization, the **pullStruct** method can be used to get the IFstruct object of the current project after obtaining user authorization **CTTReadAccess** and **ModelsReadAccess** permissions.

Parameter:

| Parameters | Default | Description |
| ---------- | ------ | ---------------------------- |
| path | - | The path to the subproperties of the IFstruct object.     |

Example:

```js
let flag = await PLUS.withAccess([
  'CTTReadAccess',
  'ModelsReadAccess'
])

if (!flag) return PLUS.toast.warning('Insufficient permissions')

let id = 'Global'
let struct = await PLUS.pullStruct('CTT.T.HSS.' + id)
```

Returns the entire project tree structure when the path argument is **ALL**.
*/
export declare function pullStruct(path?: string): Promise<IRes | unknown>;
/**
*setStruct(path: **String**, value: **any**) : **Promise\<Res\>***

After successful initialization, the IFstruct object of the current project can be modified by the **setStruct** method with the user authorization **CTTWriteAccess** and **ModelsWriteAccess** permissions.

Parameter:

| Parameter | Default | Description |
| ---------- | ------ | ---------------------------- |
| path | - | The path to the subproperties of the IFstruct object.     |
| value | - | The value to assign to the target object's properties.     |

Example:

```js
let flag = await PLUS.withAccess([
  'CTTWriteAccess',
  'ModelsWriteAccess'
])

if (!flag) return PLUS.toast.warning('Insufficient permissions')

let id = 'Global'

await PLUS.setStruct(`CTT.T.HSS.${id}.lock`, true)
await PLUS.setStruct(`CTT.T.HSS.${id}`, {
  lock: false,
  content: 'base/photo'
})
```
*/
export declare function setStruct(path?: string, value?: {}): Promise<IRes>;
/**
*getCurrentStyle() : **Promise\<Object | Res\>***

After successful initialisation, the **getCurrentStyle** method can be used to obtain the style object for the currently selected component state, provided that the user's authorisation **CTTReadAccess** permission has been obtained.

Parameter:

None.

Example:

```js
let flag = await PLUS.withAccess([
  'CTTReadAccess'
])

if (!flag) return PLUS.toast.warning('Insufficient permissions')

await PLUS.getCurrentStyle()
```
*/
export declare function getCurrentStyle(): Promise<GlobalObject>;
/**
*setCurrentStyle(payload: **Object**) : **Promise\<Res\>***

After successful initialisation, the style properties of the currently selected component state can be modified via the **setCurrentStyle** method, provided that the user's authorisation **CTTWriteAccess** permission has been obtained.

Parameter:

| Parameter | Default | Description |
| ---------- | ------ | ---------------------------- |
| payload  | { }  | The content of the assignment to the target object property.     |

Example:

```js
let flag = await PLUS.withAccess([
  'CTTWriteAccess'
])

if (!flag) return PLUS.toast.warning('Insufficient permissions')

await PLUS.setCurrentStyle({
  color: '#2c2c2c',
  width: '150px'
})
```
*/
export declare function setCurrentStyle(payload: GlobalObject): Promise<IRes>;
/**
*log(.. .arg: any[]) : **Promise\<Boolean\>***

This method is used to output extended debugging information in the iofod console.

Parameter:

| Arguments | Default | Description |
| ---------- | ------ | ---------------------------- |
| arg | - | Any parameter value.     |

Example:

```js
PLUS.log('foo', 'bar', 2333)
```
*/
export declare function log(...arg: unknown[]): Promise<boolean>;
export declare function genStruct(tag: string, config: IMatchCof, hook?: string): IStruct;
/**
*setState(patch: **Object**) : **Promise\<Function\<getState\>\>**

After successful initialization, the sub-properties of the application state object can be modified by the **setState** method.

Parameter:

| Parameters | Default | Description |
| ---------- | ------ | ---------------------------- |
| patch | { } | The key-value pair of the path and value of the sub-properties of the target application state object.     |

Example:

```js
await PLUS.init({
  state: {
	foo: {
	  bar: 666
	},
	name: 'test'
  },
  persisted: false
})

await PLUS.setState({
  'name': 'test2',
  'foo.bar': 2333
})

```

Note that all state properties should be pre-configured, dynamic addition of properties is not supported, and it is recommended to keep the same data type before and after modifying the properties.
*/
export declare function setState(payload: GlobalObject, sync?: boolean): boolean;
/**
*getState(key: **Object**) : **Promise\<any\>***

After successful initialization of the extended application state, the object of the application state should be taken over by PLUS with full authority, otherwise there may be problems with the state being unresponsive.

After successful initialization, the sub-properties of the application state object can be obtained by the **getState** method.

Parameter:

| parameter | default | description |
| ---------- | ------ | ---------------------------- |
| key | { } | The path to the subproperties of the application state object.     |

Example:

```js
let { Button } = PLUS.components

$ = await PLUS.init({
  state: {
	msg: 'Hello World',
  },
  persisted: false
})

// $ is a reference to the getState method
await PLUS.render([
  Button({
	value: $('msg')
  }, 'submit')
])

export function submit(e) {
  console.log($('msg'), PLUS.getState('msg'))
}
```
*/
export declare function getState(key: string | number): unknown;
/**

*init(config: **Object\<Options\>**) : **Promise<Function\<getState\>***

PLUS model initialization interface for setting the application state and cache of the expansion, which is required to be called for expansion initialization before using the SDK.

Parameter:

| Parameters | Default | Description |
| ---------- | ------ | ---------------------------- |
| config | { } | The base configuration of the extension.     |

Description of the **config** object parameters.

| parameters | default | description |
| ---------- | ------ | ---------------------------- |
| state | { } | The expanded application state object. | persisted
| persisted | false | Configures the extended application state persistence, if true, the version must be configured as well. |
| version | - | Configures the version of the extension, which is used to notify the system whether to refresh the application state of the extension when persisted is started. |
| size | 320 | Expanded display width, between 320 to 1280. |

Description of **getState** method.

Returns the **getState** method belonging to the SDK.

Example:

```js
$ = await PLUS.init({
  state: {
	isHold: false,
	name: '2333',
	foo: {
	  bar: 666
	},
	tabType: 'tab1',
	useLoading: false
  },
  persisted: true,
  version: '1.0.0',
  size: 420
})
```
 */
export declare function init(config?: IConf): Promise<unknown>;
export declare function reinit(): boolean;
/**

*render(struct: **Array\<Component\>**) : **Promise\<Boolean\>***

This method is used to control the content rendered to the expansion interface.

Parameter:

| Parameters | Default | Description |
| ---------- | ------ | ---------------------------- |
| components | [ ] | The contents of the components to be rendered to the expanded interface.    | components

**components** is a PLUS.components object, usage can be found in: [Extension Components](https://doc.iofod.com/#/en/9/03.md).

Execution returns.

A flag for successful or failed rendering.

Example:

```js
let { Text } = PLUS.components

$ = await PLUS.init({
  state: {
	msg: 'World',
  },
  persisted: false
})

await PLUS.render([
  Text({
	value: 'Hello'
  }),
  Text({
	value: $('msg'),
	style: {
	  fontSize: '18px'
	}
  })
])
```

*/
export declare function render(struct: IStruct[]): Promise<boolean>;
/**
The toast object mounts common methods for extending message notifications to users.
*/
export declare const toast: {
	/**
	*success(message: **String**) : **Promise***
  
	Parameter:
  
	| parameter | default | description |
	| ---------- | ------ | ---------------------------- |
	| message | - | The content of the message notification.     |
  
	Example:
  
	```js
	PLUS.toast.success('Done!')
	```
	*/
	success(message: string): void;
	/**
	*error(message: **String**) : **Promise***
  
	Parameter:
  
	| parameter | default | description |
	| ---------- | ------ | ---------------------------- |
	| message | - | The content of the message notification.     |
  
	Example:
  
	```js
	PLUS.toast.error('Something wrong!')
	```
	*/
	error(message: string): void;
	/**
	*info(message: **String**) : **Promise***
  
	Parameter:
  
	| parameter | default | description |
	| ---------- | ------ | ---------------------------- |
	| message | - | The content of the message notification.     |
  
	Example:
  
	```js
	PLUS.toast.info('Your new message...')
	```
	*/
	info(message: string): void;
	/**
	*warning(message: **String**) : **Promise***
  
	Parameter:
  
	| parameters | default | description |
	| ---------- | ------ | ---------------------------- |
	| message | - | The content of the message notification.     |
  
	Example:
  
	```js
	PLUS.toast.warning('Warning')
	```
	*/
	warning(message: string): void;
	/**
	*log(message: **String**) : **Promise***
  
	Parameter:
  
	| parameters | default | description |
	| ---------- | ------ | ---------------------------- |
	| message | - | The content of the message notification.     |
  
	Example:
  
	```js
	PLUS.toast.log('print messages')
	```
	*/
	log(message: string): void;
};
/**
The cache object mounts common methods for expanding persistent data storage, divided into two parts: local storage and session storage.

1. expand local storage

You can use **getLocal/saveLocal/removeLocal** to store data locally for expansions.

* getLocal
* saveLocal
* removeLocal

2. Extending session storage

You can use **getSession/saveSession/removeSession** to store data sessions for extensions, and the storage expires when the browser session ends.

* getSession
* removeSession
* saveSession

*/
export declare const cache: {
	/**
	*getLocal(id: **String**) : **Promise\<Object\>***
  
	Gets the local storage object based on the ID.
  
	Parameter:
  
	| Parameters | Default | Description |
	| ---------- | ------ | ---------------------------- |
	| id | - | The unique ID of the local storage object. |
  
	Example:
  
	```js
	let store = await PLUS.cache.getLocal('foo')
  
	console.log(store)
	```
	*/
	getLocal(key: string): Promise<GlobalObject>;
	/**
	*saveLocal(id: **String**, data: **Object**) : **Promise\<Boolean\>***
  
	Save an object to local storage.
  
	Parameter:
  
	| Parameter | Default | Description |
	| ---------- | ------ | ---------------------------- |
	| id | - | The unique ID of the local storage object. |
	| data | { } | The target storage object.     |
  
	Example:
  
	```js
	await PLUS.cache.saveLocal('foo', { bar: 2333 })
	```
	*/
	saveLocal(key: string, value: unknown): Promise<boolean>;
	/**
	*removeLocal(id: **String**) : **Promise\<Boolean\>***
  
	Removes a local storage object.
  
	Parameter:
  
	| Parameters | Default | Description |
	| ---------- | ------ | ---------------------------- |
	| id | - | The unique ID of the local storage object. |
  
	Example:
  
	```js
	await PLUS.cache.removeLocal('foo')
	```
	*/
	removeLocal(key: string): Promise<boolean>;
	/**
	*getSession(id: **String**) : **Promise\<Object\>***
  
	Gets the session storage object based on the ID.
  
	Parameter:
  
	| Parameters | Default | Description |
	| ---------- | ------ | ---------------------------- |
	| id | - | The unique ID of the session storage object. |
  
	Example:
  
	```js
	let store = await PLUS.cache.getSession('foo')
  
	console.log(store)
	```
	*/
	getSession(key: string): Promise<GlobalObject>;
	/**
	*saveSession(id: **String**, data: **Object**) : **Promise\<Boolean\>***
  
	Saves the object to the session store.
  
	Parameter:
  
	| Parameter | Default | Description |
	| ---------- | ------ | ---------------------------- |
	| id | - | The unique ID of the session store object. |
	| data | { } | The target storage object.     |
  
	Example:
  
	```js
	await PLUS.cache.saveSession('foo', { bar: 2333 })
	```
	*/
	saveSession(key: string, value: unknown): Promise<boolean>;
	/**
	*removeSession(id: **String**) : **Promise\<Boolean\>***
  
	Removes the session storage object.
  
	Parameter:
  
	| Parameters | Default | Description |
	| ---------- | ------ | ---------------------------- |
	| id | - | The unique ID of the session storage object. |
  
	Example:
  
	```js
	await PLUS.cache.removeSession('foo')
	```
	*/
	removeSession(key: string): Promise<boolean>;
};
/**
The components object mounts a representation of the components supported by the extension interface, for details see: [Extension Components](https://doc.iofod.com/#/en/9/03.md).
*/
export declare const components: {
	/**
   *Container
  
  Container component for organizing the structure of expanded interface components.
  
  Property descriptions.
  
  | Properties | Default | Description                                                       |
  | ---------- | ------- | ----------------------------------------------------------------- |
  | style      | { }     | The CSS style configuration for the container.                    |
  | hoverStyle | { }     | The CSS style configuration for the container in the hover state. |
  | children   | [ ]     | The list of child elements of the container.                      |
  
  Event:
  
  | event | description                            |
  | ----- | -------------------------------------- |
  | click | The click event of the target element. |
  
  Example:
  
  ```js
  const { Text, Container } = PLUS.components
  
  export async function main() {
	await PLUS.init({
	  state: {
		name: 'Mike',
	  }
	})
  
	await PLUS.render([
	  Text('$name'),
	  Container(
		children: [
		  Text('Hello'),
		  Text('World')
		]
	  )
	])
  }
  ```
  */
	Container(config: IContainer, hook?: string): IStruct;
	/**
  Text component, used to expand the display of common text in the interface.
  
  Parameter:
  
  | Properties | Default | Description                                    |
  | ---------- | ------- | ---------------------------------------------- |
  | value      | -       | The text content.                              |
  | style      | { }     | The CSS style configuration for the text.      |
  | hoverStyle | { }     | The CSS style for the text in the hover state. |
  
  Event:
  
  The Text component does not support binding events.
  
  Example:
  
  ```js
  const { Text } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		msg: "Hello",
		name: "Mike",
	  },
	});
  
	await PLUS.render([
	  Text("$msg"),
	  Text("World"),
	  Text({
		value: '# "by" + $name',
		style: {
		  fontSize: "24px",
		  color: "#ccc",
		  opacity: 1,
		  transition: "all 0.3s ease",
		},
		hoverStyle: {
		  opacity: 0.8,
		},
	  }),
	]);
  }
  ```
  */
	Text(config: IText, hook?: string): IStruct;
	/**
  Tab menu component for switching and displaying components.
  
  Parameter:
  
  | Properties | Default | Description                                                                                                              |
  | ---------- | ------- | ------------------------------------------------------------------------------------------------------------------------ |
  | value      | -       | The value of the active Tab item.                                                                                        |
  | list       | { }     | The configuration of the sub-Tab item.                                                                                   |
  | sticky     | false   | Controls the start of the [sticky layout](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky_positioning). |
  
  Description of the **list** object.
  
  The key-name of this Key-Value object indicates the identity of the Tab item, and the key-value indicates the text display of the Tab item in the Tab menu.
  
  Event:
  
  | Event  | Description                |
  | ------ | -------------------------- |
  | change | The Tab item change event. |
  
  Example:
  
  ```js
  const { Tabs } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		tabType: "tab1",
	  },
	});
  
	await PLUS.render([
	  Tabs(
		{
		  value: "$tabType",
		  list: {
			tab1: "tab1",
			tab2: "tab2",
			tab3: "tab3",
			tab4: "tab4",
		  },
		  sticky: false,
		},
		"changeTab"
	  ),
	]);
  }
  
  export async function changeTab(e) {
	console.log(e);
  }
  ```
  */
	Tabs(config: ITab, hook?: string): IStruct;
	/**
  The button component.
  
  Parameter:
  
  | Properties | Default                                                                                     | Description                                |
  | ---------- | ------------------------------------------------------------------------------------------- | ------------------------------------------ |
  | value      | -                                                                                           | The display text content of the button.    |
  | color      | -                                                                                           | The color of the button.                   |
  | disabled   | false                                                                                       | Controls the disabled state of the button. |
  | icon       | - the icon content of the button, supports [Material Icon](https://fonts.google.com/icons). |
  
  Event:
  
  | event | description                     |
  | ----- | ------------------------------- |
  | click | The target element click event. |
  
  Example:
  
  ```js
  const { Button } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {},
	});
  
	await PLUS.render([
	  Button("well"),
	  Button(
		{
		  icon: "grade",
		  color: "#000000",
		  value: "done"
		},
		"click"
	  ),
	]);
  }
  
  export async function click(e) {
	console.log(e);
  }
  ```
  */
	Button(config: IButton, hook?: string): IStruct;
	/**
  Button container component.
  
  Parameter:
  
  | Properties | Default | Description                                                                 |
  | ---------- | ------- | --------------------------------------------------------------------------- |
  | style      | { }     | The CSS style configuration for the button container.                       |
  | group      | [ ]     | The configured content of the sub-button, same as the **Button** component. |
  
  Event:
  
  | event | description                                   |
  | ----- | --------------------------------------------- |
  | click | The click event of the target button element. |
  
  Example:
  
  ```js
  const { ButtonGroup } = PLUS.components
  
  export async function main() {
	await PLUS.init({
	  state: {
	  }
	})
  
	await PLUS.render([
	  ButtonGroup(
		{
		  style: {
			display: 'flex',
			justifyContent: 'center'
		  },
		  group: [
			{
			  value: '23567',
			  color: 'none'
			},
			{
			  icon: 'grade',
			  value: '666',
			  color: '#4caf50'
			},
			{
			  value: 'Cancel'
			}
		  ]
		},
		'clickButtonGroup'
	  ),
	])
  }
  
  export async function clickButtonGroup(e) {
	console.log(e)
  }
  ```
  */
	ButtonGroup(config: IButtonGroup, hook?: string): IStruct;
	/**
  Switch component.
  
  Parameter:
  
  | Attribute | Default | Description                                          |
  | --------- | ------- | ---------------------------------------------------- |
  | value     | -       | The value of the target component.                   |
  | name      | -       | The title of the target component.                   |
  | disabled  | false   | Controls the disabled state of the target component. |
  
  Event:
  
  | event  | description                                   |
  | ------ | --------------------------------------------- |
  | change | The value change event of the target element. |
  
  Example:
  
  ```js
  const { SwitchItem } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		isOpen: false,
	  },
	});
  
	await PLUS.render([
	  SwitchItem(
		{
		  value: "$isOpen",
		  name: "Switch",
		},
		"change"
	  ),
	]);
  }
  
  export async function change(e) {
	console.log(e);
  }
  ```
  */
	SwitchItem(config: ISwitchItem, hook?: string): IStruct;
	/**
  Single-select component.
  
  Parameter:
  
  | Properties | Default | Description                                          |
  | ---------- | ------- | ---------------------------------------------------- |
  | value      | -       | The value of the target component.                   |
  | name       | -       | The title of the target component.                   |
  | disabled   | false   | Controls the disabled state of the target component. |
  
  Event:
  
  | event  | description                                   |
  | ------ | --------------------------------------------- |
  | change | The value change event of the target element. |
  
  Example:
  
  ```js
  const { Checkbox } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		isHold: false,
	  },
	});
  
	await PLUS.render([
	  Checkbox(
		{
		  value: "$isHold",
		  name: "Check",
		},
		"change"
	  ),
	]);
  }
  
  export async function change(e) {
	console.log(e);
  }
  ```
  */
	Checkbox(config: ICheckbox, hook?: string): IStruct;
	/**
  Dropdown selection component.
  
  Parameter:
  
  | Property   | Default | Description                                                             |
  | ---------- | ------- | ----------------------------------------------------------------------- |
  | value      | -       | The value of the target element.                                        |
  | name       | -       | The title of the target element.                                        |
  | options    | [ ]     | The configuration of the drop-down options, see the **options** object. |
  | filterable | false   | Controls the filtering of the options.                                  |
  | changeable | false   | Controls support for custom options.                                    |
  
  Description of the **options** object.
  
  | properties | default | description                                       |
  | ---------- | ------- | ------------------------------------------------- |
  | value      | -       | The value of the option.                          |
  | label      | -       | The description text of the option.               |
  | disabled   | false   | Controls the disabled state of the target option. |
  
  Event:
  
  | event  | description                                   |
  | ------ | --------------------------------------------- |
  | change | The value change event of the target element. |
  
  Example:
  
  ```js
  const { SelectItem } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		select1: "",
	  },
	});
  
	await PLUS.render([
	  SelectItem(
		{
		  name: "Form",
		  value: "$select1",
		  filterable: false,
		  changeable: false,
		  options: [
			{
			  value: "op1",
			  label: "op1",
			},
			{
			  value: "op2",
			  label: "op2",
			  disabled: true,
			},
			{
			  value: "op3",
			  label: "op3",
			},
		  ],
		},
		"changeSelect"
	  ),
	]);
  }
  
  export async function changeSelect(e) {
	console.log(e);
  }
  ```
  */
	SelectItem(config: ISelectItem, hook?: string): IStruct;
	/**
  Option group component.
  
  Parameter:
  
  | Property | Default | Description                                                   |
  | -------- | ------- | ------------------------------------------------------------- |
  | value    | -       | The value of the target element.                              |
  | name     | -       | The title of the target element.                              |
  | style    | { }     | The CSS style configuration of the target element.            |
  | options  | [ ]     | The configuration of the options, see the **options** object. |
  
  Description of the **options** object.
  
  | properties | default | description                                                                                            |
  | ---------- | ------- | ------------------------------------------------------------------------------------------------------ |
  | value      | -       | The value of the option.                                                                               |
  | label      | -       | The description text of the option.                                                                    |
  | disabled   | false   | Controls the disabled state of the target option.                                                      |
  | icon       | -       | Configure the value of the vector path to display the icon, just as you would with the icon component. |
  | viewBox    | -       | If the option is of type icon, the viewBox property can be configured as if it were an SVG.            |
  | tip        | -       | Hover tips for options.                                                                                |
  | style      | { }     | The CSS style configuration for the options.                                                           |
  | wrapStyle  | { }     | The CSS style configuration for the options container.                                                 |
  
  Event:
  
  | event  | description                                   |
  | ------ | --------------------------------------------- |
  | change | The value change event of the target element. |
  
  Example:
  
  ```js
  const { OptionGroup } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		select1: "",
	  },
	});
  
	await PLUS.render([
	  OptionGroup(
		{
		  name: 'Shape',
		  value: '$select1',
		  options: [
			{
			  value: 0,
			  label: 's1',
			},
			{
			  value: 2,
			  label: 's2',
			},
			{
			  value: 3,
			  label: 's3',
			},
			{
			  value: 1,
			  label: 's4',
			  viewBox: '0 0 145 24',
			  icon: 'M0 2H22V21C22 21.5523 22.4477 22 23 22H121C121.552 22 122 21.5523 122 21V2H145',
			},
		  ],
		},
		"changeSelect"
	  ),
	]);
  }
  
  export async function changeSelect(e) {
	console.log(e);
  }
  ```
  */
	OptionGroup(config: IOptionGroup, hook?: string): IStruct;
	/**
  The input box component.
  
  Parameter:
  
  | Properties  | Default                           | Description                                                     |
  | ----------- | --------------------------------- | --------------------------------------------------------------- |
  | value       | -                                 | The value of the input box.                                     |
  | type        | -                                 | The form type of the input box.                                 |
  | name        | -                                 | The title of the input box.                                     |
  | placeholder | - - The prompt for the input box. |
  | disabled    | false                             | Controls the disabled state of the input box.                   |
  | readonly    | false                             | Controls the read-only state of the input box.                  |
  | useHelper   | false                             | Controls the display state of the filler tool in the input box. |
  | maxlength   | -                                 | The maximum length of the input field.                          |
  
  Event:
  
  | event  | description                                               |
  | ------ | --------------------------------------------------------- |
  | focus  | The event to get the input focus of the target input box. |
  | blur   | The event of losing focus of the target input box.        |
  | input  | The keyboard input event of the target input box.         |
  | change | The value change event of the target input box.           |
  
  Example:
  
  ```js
  const { InputItem } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		input1: "Customer",
		input2: "",
	  },
	});
  
	await PLUS.render([
	  InputItem(
		{
		  name: "ID",
		  value: "$input1",
		  useHelper: true,
		},
		"changeInput"
	  ),
	  InputItem(
		{
		  name: "PW",
		  value: "$input2",
		  useHelper: false,
		  readonly: false,
		  type: "password",
		  maxlength: 14,
		},
		"changeInput"
	  ),
	]);
  }
  
  export async function changeInput(e) {
	console.log(e);
  }
  ```
  */
	InputItem(config: IInputItem, hook?: string): IStruct;
	/**
  Canvas component.
  
  Parameter:
  
  | Properties | Default | Description                                |
  | ---------- | ------- | ------------------------------------------ |
  | width      | 300     | The drawing width of the canvas.           |
  | height     | 200     | The height of the canvas to draw.          |
  | style      | { }     | The CSS style configuration of the canvas. |
  
  Event:
  
  | event      | description                                                                                                                |
  | ---------- | -------------------------------------------------------------------------------------------------------------------------- |
  | transfer   | The canvas initialization event, used to transfer the canvas control of the expanded interface to the expanded processing. |
  | mouseenter | The mouseenter event of the target element.                                                                                |
  | mouseleave | The mouse leave event of the target element.                                                                               |
  | mousedown  | The mouse down event of the target element.                                                                                |
  | mouseup    | The mouseup event of the target element.                                                                                   |
  | mousemove  | The mouseover event of the target element.                                                                                 |
  | mousewheel | The mouse wheel scroll event of the target element.                                                                        |
  
  Example:
  
  ```js
  const { Canvas } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {},
	});
  
	await PLUS.render([
	  Canvas(
		{
		  width: 100,
		  height: 100,
		  style: {
			position: "absolute",
			top: "120px",
			left: "50px",
			backgroundColor: "#fff",
		  },
		},
		"initCanvas"
	  ),
	]);
  }
  
  , initCanvas(e) {
	if (e.type == "transfer") {
	  let cxt = e.transfer.getContext("2d");
	  cxt.fillStyle = "#FF0000";
	  cxt.fillRect(50, 0, 150, 75);
	}
  }
  ```
  */
	Canvas(config: ICanvas, hook?: string): IStruct;
	/**
  Slider component.
  
  Parameter:
  
  | Attribute | Default | Description                                  |
  | --------- | ------- | -------------------------------------------- |
  | value     | -       | The value of the target component.           |
  | name      | -       | The title of the target component.           |
  | step      | 1       | The step length of the slider.               |
  | hideTip   | true    | Control the display of the slider value tip. |
  | min       | 0       | The minimum value of the slider.             |
  | max       | 100     | The maximum value of the slider.             |
  
  Event:
  
  | event  | description                                                   |
  | ------ | ------------------------------------------------------------- |
  | input  | The event to change the value of the slider during sliding.   |
  | change | The event to change the value after the slider stops sliding. |
  
  Example:
  
  ```js
  const { SliderItem } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		s1: 0,
	  },
	});
  
	await PLUS.render([
	  SliderItem(
		{
		  name: "Slider",
		  value: "$s1",
		  hideTip: false,
		  min: -100,
		  max: 100,
		  step: 2,
		},
		"changeSlider"
	  ),
	]);
  }
  
  export async function changeSlider(e) {
	console.log(e);
  }
  ```
  */
	SliderItem(config: ISliderItem, hook?: string): IStruct;
	/**
	Divider component.
  
	Parameter:
  
	The Divider component has no properties to configure.
  
	Event:
  
	The Divider component does not support binding events.
  
	Example:
  
	```js
	const { Text, Divider } = PLUS.components;
  
	export async function main() {
	  await PLUS.init({
		state: {},
	  });
  
	  await PLUS.render([Text("Hello"), Divider(), Text("World")]);
	}
	```
  */
	Divider(): IStruct;
	/**
  The subheader component.
  
  Parameter:
  
  | Attribute | Default | Description       |
  | --------- | ------- | ----------------- |
  | value     | -       | The text content. |
  
  Event:
  
  The SubHeader component does not support binding events.
  
  Example:
  
  ```js
  const { SubHeader } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		msg: "Hello World",
	  },
	});
  
	await PLUS.render([SubHeader("$msg")]);
  }
  ```
  */
	SubHeader(config: ISubHeader, hook?: string): IStruct;
	/**
  Header component.
  
  Attribute Description.
  
  | Attribute | Default | Description       |
  | --------- | ------- | ----------------- |
  | value     | -       | The text content. |
  
  Event:
  
  The Header component does not support binding events.
  
  Example:
  
  ```js
  const { Header } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		msg: "Hello World",
	  },
	});
  
	await PLUS.render([Header("$msg")]);
  }
  ```
  */
	Header(config: IHeader, hook?: string): IStruct;
	/**
  Loads the status component.
  
  Parameter:
  
  | Attribute | Default | Description       |
  | --------- | ------- | ----------------- |
  | value     | -       | The text content. |
  
  Event:
  
  The SubHeader component does not support binding events.
  
  Example:
  
  ```js
  const { Loading } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		useLoading: true,
	  },
	});
  
	await PLUS.render([
	  Loading({
		render: "$useLoading",
	  }),
	]);
  
	setTimeout(() => {
	  PLUS.setState({
		useLoading: false,
	  });
	}, 2000);
  }
  ```
  */
	Loading(config: ILoading, hook?: string): IStruct;
	/**
  Hyperlink component.
  
  Parameter:
  
  | Attribute | Default | Description                        |
  | --------- | ------- | ---------------------------------- |
  | value     | -       | The URL value of the hyperlink.    |
  | name      | -       | The display text of the hyperlink. |
  
  Event:
  
  The Link component does not support binding events.
  
  Example:
  
  ```js
  const { Link } = PLUS.components
  
  export async function main() {
	await PLUS.init({
	  state: {
		name: 'Google',
	  }
	})
  
	await PLUS.render([
	  Link({
		name: '$name'
		value: 'https://www.google.com'
	  })
	])
  }
  ```
  */
	Link(config: ILink, hook?: string): IStruct;
	/**
  Image component for rendering image resources in the expansion interface.
  
  Parameter:
  
  | Properties    | Default                        | Description                                                                                                              |
  | ------------- | ------------------------------ | ------------------------------------------------------------------------------------------------------------------------ |
  | value         | -                              | The URL link to the image resource.                                                                                      |
  | style         | { }                            | The CSS style configuration for the image.                                                                               |
  | hoverStyle    | { }                            | The CSS style of the image in the hover state.                                                                           |
  | dragAndDrop   | false                          | Configure the response to user drag-and-drop events.                                                                     |
  | droppableType | ['level', 'container', 'unit'] | The type of the component that is allowed to be dropped in iofod during the dragging of the image component.             |
  | payload       | { }                            | The data that is passed to the dropped component after the drop event is triggered in response to a drag-and-drop event. |
  
  Event:
  
  | event | description                            |
  | ----- | -------------------------------------- |
  | drop  | The drop event of the target element.  |
  | click | The click event of the target element. |
  
  Example:
  
  ```js
  const { Image } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		src: "https://yourlink",
	  },
	});
  
	await PLUS.render([
	  Image("https://yourlink"),
	  Image(
		{
		  dragAndDrop: true,
		  droppableType: ["level", "container"],
		  style: {
			width: "36px",
			cursor: "alias",
			opacity: "0.6",
			transition: "all 0.2s ease",
		  },
		  hoverStyle: {
			opacity: "1",
		  },
		  payload: { foo: "bar" },
		  value: "$src",
		},
		"dragend"
	  ),
	]);
  }
  
  export async function dragend(e) {
	console.log(e);
  }
  ```
  */
	Image(config: IImage, hook?: string): IStruct;
	/**
  Text field component.
  
  Parameter:
  
  | Attribute   | Default | Description                                     |
  | ----------- | ------- | ----------------------------------------------- |
  | value       | -       | The value of the text field.                    |
  | name        | -       | The title of the text field.                    |
  | placeholder | -       | The prompt for the text field.                  |
  | disabled    | false   | Controls the disabled state of the text field.  |
  | readonly    | false   | Controls the read-only state of the text field. |
  
  Event:
  
  | event  | description                                                     |
  | ------ | --------------------------------------------------------------- |
  | focus  | The get input focus event of the target element.                |
  | blur   | The event that the target element loses the focus of the input. |
  | change | The value change event of the target element.                   |
  
  Example:
  
  ```js
  const { Textarea } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		input1: "",
	  },
	});
  
	await PLUS.render([
	  Textarea(
		{
		  name: "ID",
		  value: "$input1",
		},
		"change"
	  ),
	]);
  }
  
  export async function change(e) {
	console.log(e);
  }
  ```
  */
	Textarea(config: ITextarea, hook?: string): IStruct;
	/**
  Upload component.
  
  Parameter:
  
  | Properties | Default | Description                                         |
  | ---------- | ------- | --------------------------------------------------- |
  | value      | -       | The value of the target component.                  |
  | multiple   | false   | Controls multiple file uploads.                     |
  | accept     | \*      | Controls the supported file formats for the upload. |
  
  Event descriptions.
  
  | event  | description                          |
  | ------ | ------------------------------------ |
  | drop   | The drag-and-drop file upload event. |
  | change | Click to upload the file event.      |
  
  Example:
  
  ```js
  const { UploadItem } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		file2: "",
	  },
	});
  
	await PLUS.render([
	  UploadItem(
		{
		  value: "$file2",
		  multiple: true,
		},
		"changeUpload"
	  ),
	]);
  }
  
  export async function changeUpload(e) {
	console.log(e);
  }
  ```
  */
	UploadItem(config: IUploadItem, hook?: string): IStruct;
	/**
  IFstruct container component for parsing IFstruct into regular components. The configuration allows the structural data of the IFstruct container component to be added to the target drag and drop object in response to a user drag and drop event.
  
  Parameter:
  
  | Properties         | Default | Description                                                                                                                                                  |
  | ------------------ | ------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------ |
  | value              | -       | IFstruct structure content.                                                                                                                                  |
  | style              | { }     | CSS style configuration for components.                                                                                                                      |
  | hoverStyle         | { }     | The CSS style configuration for a component in the mouse hover state.                                                                                        |
  | subStyle           | { }     | This attribute is used to override the style attribute of the top-level element of the IFstruct structure.                                                   |
  | dragAndDrop        | false   | Configure the response to user drag-and-drop events.                                                                                                         |
  | proxyCurrentTarget | false   | Used to directly preview the object currently selected by the user to avoid performance loss. When switched on, the configured dragAndDrop will be disabled. |
  | payload            | { }     | Allows data to be passed back to the component when the addComponent event is fired in response to a drag and drop event.                                    |
  
  Event:
  
  | Event        | Description                                                       |
  | ------------ | ----------------------------------------------------------------- |
  | addComponent | The event after a component has been added to the target element. |
  
  Example:
  
  ```js
  const { IFstructContainer } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {},
	});
  
	await PLUS.render([
	  IFstructContainer(
		{
		  dragAndDrop: true,
		  payload: {
			type: "custom-icon",
		  },
		  style: {
			padding: "4px 8px",
		  },
		  value: {
			u692644537uw: {
			  name: "ic_stars",
			  type: "unit",
			  lock: false,
			  parent: null,
			  children: [],
			  content: "base/icon",
			  remarks: "",
			  status: [
				{
				  name: "default",
				  id: "default",
				  active: true,
				  props: {
					option: {},
					style: {
					  color: "rgb(253, 157, 157)",
					  fill: "rgb(253, 157, 157)",
					},
					d: 0,
					x: 0,
					y: 0,
				  },
				},
			  ],
			  model: {
				viewBox: {
				  value: "0 0 48 48",
				  subscribe: "",
				  ZI: 0,
				},
				d: {
				  value:
					"M23.99 4C12.94 4 4 12.95 4 24s8.94 20 19.99 20C35.04 44 44 35.05 44 24S35.04 4 23.99 4zm8.47 32L24 30.9 15.54 36l2.24-9.62-7.46-6.47 9.84-.84L24 10l3.84 9.07 9.84.84-7.46 6.47L32.46 36z",
				  subscribe: "",
				  ZI: 0,
				},
			  },
			  events: [],
			},
		  },
		},
		"dragend"
	  ),
	]);
  }
  
  export async function dragend(e) {
	console.log(e);
  }
  ```
  */
	IFstructContainer(config: IIFstructContainer, hook?: string): IStruct;
	/**
  Code component for highlighting code, supporting highlighting of `HTML`, `CSS`, `Javascript` and `JSON` code.
  
  Parameter:
  
  | Properties  | Default    | Description                                                             |
  | ----------- | ---------- | ----------------------------------------------------------------------- |
  | value       | -          | Code content                                                            |
  | lang        | javascript | Language format of the code, supporting html, css, javascript and json. |
  | style       | { }        | CSS style configuration for components.                                 |
  | hoverStyle  | { }        | The CSS style configuration for a component in the mouse hover state.   |
  | hideCopyBtn | false      | Configure whether to display the code copy button.                      |
  
  Event:
  
  | Event    | Description                                                                                     |
  | -------- | ----------------------------------------------------------------------------------------------- |
  | copyCode | If the Show Copy button is set, then the result of the copy will be called back via this event. |
  
  Example:
  
  ```js
  const { Code } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		currentJSON: "{}",
	  },
	});
  
	await PLUS.render([
	  Code(
		{
		  lang: "json",
		  hideCopyBtn: false,
		  value: "$currentJSON",
		  style: {
			opacity: 0.8,
		  },
		  hoverStyle: {
			opacity: 1,
		  },
		},
		"listenCopy"
	  ),
	]);
  }
  
  export async function listenCopy(e) {
	console.log(e);
  }
  ```
  */
	Code(config: ICode, hook?: string): IStruct;
	/**
  Colour picker component.
  
  Parameter:
  
  | Property | Default | Description                      |
  | -------- | ------- | -------------------------------- |
  | value    | -       | The value of the target element. |
  | name     | -       | The title of the target element. |
  
  Event:
  
  | Event | Description                               |
  | ----- | ----------------------------------------- |
  | input | Triggers an event when the color changes. |
  
  Example:
  
  ```js
  const { ColorPicker } = PLUS.components;
  
  export async function main() {
	await PLUS.init({
	  state: {
		color: "#ffffff",
	  },
	});
  
	await PLUS.render([
	  ColorPicker(
		{
		  name: 'Color',
		  value: '$color',
		},
		"changeColor"
	  ),
	]);
  }
  
  export async function changeColor(e) {
	console.log(e);
  }
  ```
  */
	ColorPicker(config: IColorPicker, hook?: string): IStruct;
};
export declare const Version = "1.0.6";

export {};
